#include "stm32f4xx.h" 
#define SLAVE_ADDR 0x68 /* 1101 000. DS1337 */ 
#define LED_PIN GPIO_Pin_5 void delayMs(int n);
 void I2C1_init(void); 
 void I2C1_burstRead(uint8_t saddr, uint8_t maddr, uint8_t n, uint8_t* data); 
 int main(void) 
 { 
 uint8_t timeDateReadback[7]; 
 uint8_t seconds; I2C1_init(); /* Configure PA5 for the green LED (LD2) */ 
 RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE); 
 GPIO_InitTypeDef GPIO_InitStruct; 
 GPIO_InitStruct.GPIO_Pin = LED_PIN;
  GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT; 
  GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz; 
  GPIO_InitStruct.GPIO_OType = GPIO_OType_PP; 
  GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL; 
  GPIO_Init(GPIOA, &GPIO_InitStruct); 
  while (1) 
  { 
  I2C1_burstRead(SLAVE_ADDR, 0x00, 7, timeDateReadback); 
  seconds = timeDateReadback[0] & 0x7F; // Mask out the CH bit // Blink the LED based on the seconds value 
  if (seconds % 2 == 0) 
  { 
  GPIO_SetBits(GPIOA, LED_PIN); // Turn on the LED (LD2)
   } 
   else 
   { 
   GPIO_ResetBits(GPIOA, LED_PIN); // Turn off the LED (LD2)
    } delayMs(1000); // Delay for 1 second
     } 
     } 
     void delayMs(int n) 
     { 
     int i; 
     for (; n > 0; n--) 
     for (i = 0; i < 3195; i++) ; 
     } 
     void I2C1_init(void) 
     { 
     RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);
     RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE); 
     GPIO_InitTypeDef GPIO_InitStruct; 
     GPIO_InitStruct.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7; 
     GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF; 
     GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz; 
     GPIO_InitStruct.GPIO_OType = GPIO_OType_OD; 
     GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL; 
     GPIO_Init(GPIOB, &GPIO_InitStruct); 
     GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_I2C1); 
     GPIO_PinAFConfig(GPIOB, GPIO_PinSource7, GPIO_AF_I2C1); 
     I2C_InitTypeDef I2C_InitStruct; 
     I2C_InitStruct.I2C_ClockSpeed = 100000; // 100 kHz 
     I2C_InitStruct.I2C_Mode = I2C_Mode_I2C; 
     I2C_InitStruct.I2C_DutyCycle = I2C_DutyCycle_2; 
     I2C_InitStruct.I2C_OwnAddress1 = 0x00; 
     I2C_InitStruct.I2C_Ack = I2C_Ack_Enable; 
     I2C_InitStruct.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit; 
     I2C_Init(I2C1, &I2C_InitStruct); I2C_Cmd(I2C1, ENABLE); 
     }
      void I2C1_burstRead(uint8_t saddr, uint8_t maddr, uint8_t n, uint8_t* data)
       {
        I2C_GenerateSTART(I2C1, ENABLE); 
        while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT)) ; 
        I2C_Send7bitAddress(I2C1, saddr, I2C_Direction_Transmitter); 
        while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED)) ; 
        I2C_SendData(I2C1, maddr); 
        while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED)) ;
         I2C_GenerateSTART(I2C1, ENABLE); 
         while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT)) ; 
         I2C_Send7bitAddress(I2C1, saddr, I2C_Direction_Receiver); 
         while (!I2C_CheckEvent(I2C
