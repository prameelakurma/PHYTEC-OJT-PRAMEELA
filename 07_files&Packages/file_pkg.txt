Splitting Files
----------------

The do_package task splits the files produced by the recipe during do_install into logical components.

Even software that produces a single binary might still have
	debug symbols
	documentation and
	other logical components that should be split out

This separation exists because not all of those installed files are useful in every image

For example, you probably do not need any of the documentation installed in a production image

The do_package task ensures that files are split up and packaged correctly.

The PACKAGES and FILES variables controls splitting

PACKAGES	lists all of the packages to be produced

FILES		specifies which files to include in each package by using an override to specify the package


















PACKAGES
-----------

PACKAGES        -       The list of packages the recipe creates

The default value:	${PN}-dbg ${PN}-staticdev ${PN}-dev ${PN}-doc ${PN}-locale ${PACKAGE_BEFORE_PN} ${PN}

FILES		-	The list of files and directories that are placed in a package

To use the FILES variable, provide a package name override that identifies the resulting package

Eg. FILES:${PN} specifies the files to go into the main package

Then, provide a space-separated list of files or paths that identify the files you want included as part of the resulting package

Eg. FILES:${PN} += "${bindir}/mydir1 ${bindir}/mydir2/myfile"

Good Practice : use ${sysconfdir} rather than /etc or ${bindir} rather than /usr/bin

List of the variables can be found in meta/conf/bitbake.conf

What are the default values of various FILES_* variables?
---------------------------------------------------------

Consequently, you might find you do not even need to set these variables in your recipe unless the software the recipe is building installs files into non-standard locations.

The PACKAGES and FILES_* variables in the meta/conf/bitbake.conf configuration file define how files installed by the do_install task are packaged


$ bitbake -e myhello | grep ^PACKAGES=

$ bitbake -e myhello | grep ^FILES:myhello=

$ bitbake -e myhello | grep ^FILES:myhello-dbg=

$ bitbake -e myhello | grep ^FILES:myhello-dev=




$ vim source/poky/meta/conf/bitbake.conf





Add a ReadMe.txt file in myhello recipe and then update the myhello_1.0.bb and check what happens ?
---------------------------------------------------------------------------------------------------
edit myhello_1.0.bb file

SRC_URI = "file://userprog.c \
	   file://ReadMe.txt "
	   
do_install()
{
	install -d ${D}${bindir}
        install -m 0755 userprog ${D}${bindir}
        install -d ${D}${docdir}
        install -m 0644 ReadMe.txt ${D}${docdir}
        
}
	   
then compile the myhello recipe and goto workdir

$ bitbake myhello

$ tree images

$ tree packages-split

$ bitbake -e myhello | grep ^FILES:myhello-doc=

$ bitbake phy-image

$ runqemu nographic

add the package name in phy-image recipe

INSTALL_IMAGE += "myhello myhello-doc"

$ bitbake phy-image

$ runqemu nographic




ques--->What happen when we include ReadMe.txt file in includedir ?










Important Point
------------------

For each installed file, the first package whose FILES value matches the file is the package into which the file goes.

If a file matches the FILES variable for more than one package in PACKAGES, it will be assigned to the earliest (leftmost) package.

adding FILES variable in myhello recipe

FILES:${PN}-dbg += "${bindir}/userprog"
FILES:${PN} += "${bindir}/userprog"

$ bitbake myhello

$ tree packages-split

$ bitbake -e myhello | grep ^PACKAGES=


if we change the sequence of package then also this binary go to dbg package as it is leftmost package

FILES:${PN} += "${bindir}/userprog"
FILES:${PN}-dbg += "${bindir}/userprog"

$ bitbake myhello













Files/directories were installed but not shipped in any package [installed-vs-shipped]
--------------------------------------------------------------------------------------

Files have been installed within the do_install task but have not been included in any package by way of the FILES variable.

Files that do not appear in any package cannot be present in an image later on in the build process

You need to do one of the following:

        Add the files to FILES for the package you want them to appear in (e.g. FILES:${PN} for the main package).

        Delete the files at the end of the do_install task if the files are not needed in any package.



myhello_1.0.bb
---------------------------------------------------------------------

DESCRIPTION = "Simple helloworld C application"

LICENSE = "MIT"

LIC_FILES_CHKSUM = "file://${COMMON_LICENSE_DIR}/MIT;md5=0835ade698e0bcf8506ecda2f7b4f302"

SRC_URI = "file://userprog.c \
           file://ReadMe.txt "

S = "${WORKDIR}"

do_compile() {
	${CC} userprog.c ${LDFLAGS} -o userprog
}

do_install() {
	install -d ${D}${bindir}
        install -m 0755 userprog ${D}${bindir}
        install -d ${D}${includedir}
        install -m 0644 ReadMe.txt ${D}${includedir}
}

FILES:${PN} += "${bindir}/userprog"
FILES:${PN}-dbg += "${bindir}/userprog ${includedir}/ReadMe.txt"

PACKAGES = "${PN}-dbg ${PN}"

---------------------------------------------------------------------------

$ bitbake myhello
$ tree images
$ tree packages-split










Problems---->Create your PACKAGE and add a file into the PACKAGE






















































Answer----->

myhello_1.0.bb
---------------------------------------------------------------------

DESCRIPTION = "Simple helloworld C application"

LICENSE = "MIT"

LIC_FILES_CHKSUM = "file://${COMMON_LICENSE_DIR}/MIT;md5=0835ade698e0bcf8506ecda2f7b4f302"

SRC_URI = "file://userprog.c \
           file://ReadMe.txt "

S = "${WORKDIR}"

do_compile() {
	${CC} userprog.c ${LDFLAGS} -o userprog
}

do_install() {
	install -d ${D}${bindir}
        install -m 0755 userprog ${D}${bindir}
        install -d ${D}${includedir}
        install -m 0644 ReadMe.txt ${D}${includedir}
}

FILES:${PN} += "${bindir}/userprog"
FILES:${PN}-dbg += "${bindir}/userprog"
FILES:${PN}-phy = "${includedir}/ReadMe.txt"

PACKAGES = "${PN}-dbg ${PN} ${PN}-phy"

---------------------------------------------------------------------------
$ bitbake myhello
$ tree images
$ tree PACKAGES-split

goto phy_image_0.1.bb file and add our own package overther 

IMAGE_INSTALL += "myhello myhello-dbg myhello-phy"

$ bitbake phy-image


