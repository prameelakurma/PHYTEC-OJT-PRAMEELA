		C_Recepies
	      -------------
	      
	      
	      
	      
	  
	  
Step 1: Create a file userprog.c with the following content:

#include <stdio.h>

int main()
{
	printf("Hello World\n");
	return 0;
}

Step 2: Create a folder in the layer recipes-example 'myhello'
	mkdir -p recipes-examples/myhello

Step 3: Create 'files' folder inside the 'myhello' folder and copy userprog.c inside this folder
	mkdir -p recipes-examples/myhello/files
	Copy the userprog.c into the above location


---------------------------------------
$ cd poky/meta/files/common-licenses
$ vim MIT
$ md5sum --tag MIT
----------------------------------------


Step 4: Create a file called 'myhello_0.1.bb' with the following content:

	DESCRIPTION = "Simple helloworld application"
	LICENSE = "MIT"
	LIC_FILES_CHKSUM = "file://${COMMON_LICENSE_DIR}/MIT;md5=0835ade698e0bcf8506ecda2f7b4f302"       
	SRC_URI = "file://userprog.c"

	S = "${WORKDIR}"

	do_compile() {
		${CC} userprog.c ${LDFLAGS} -o userprog
	}	

	do_install() {
		install -d ${D}${bindir}
		install -m 0755 userprog ${D}${bindir}
	}

Step 5: bitbake myhello









install keyword
-----------------

install not only copies files but also changes its ownership and permissions and optionally removes debugging symbols from executables.

It combines cp with chown, chmod and strip












WORKDIR
--------------

The location of the work directory in which the OpenEmbedded build system builds a recipe.

This directory is located within the TMPDIR directory structure and is specific to the recipe being built and the system for which it is being built.

The WORKDIR directory is defined as follows:

${TMPDIR}/work/${MULTIMACH_TARGET_SYS}/${PN}/${EXTENDPE}${PV}-${PR}

TMPDIR: The top-level build output directory
MULTIMACH_TARGET_SYS: The target system identifier
PN: The recipe name
EXTENDPE: Mostly blank
PV: The recipe version
PR: The recipe revision

in build system check the WORKDIR variable
$ bitbake -e myhello | grep ^WORKDIR=







OpenEmbedded Variables
----------------------

S : Contains the unpacked source files for a given recipe

D : The destination directory (root directory of where the files are installed, before creating the image)

WORKDIR: The location where the OpenEmbedded build system builds a recipe (i.e. does the work to create the package).

PN : The name of the recipe used to build the package

PV : The version of the recipe used to build the package

PR : The revision of the recipe used to build the package.

$ bitbake -e myhello | grep ^WORKDIR=
$ bitbake -e myhello | grep ^S=
$ bitbake -e myhello | grep ^D=
$ bitbake -e myhello | grep ^PN=
$ bitbake -e myhello | grep ^PV=
$ bitbake -e myhello | grep ^PR=


$ bitbake -c listtasks myhello
$ bitbake myhello

exp workdir and tree all folders





Recipe Explanation
-----------------------
The most relevant tasks that will be executed when calling bitbake myhello are the following:

$ bitbake -c cleanall myhello
$ cd build/tmp/work/core2-64-poky-linux/myhello/0.1-r0/
$ rm -rf temp

1. do_fetch: 
	in this case, since the specified SRC_URI variable points to a local file, BitBake will simply copy the file in the recipe WORKDIR. 
	This is why the S environment variable (which represents the source code location) is set to WORKDIR.

$ bitbake -c fetch myhello
$ ls temp
$ vi log.task_order
$ vi log.do_fetch.4825
$ ls -al
$ vi run.do_fetch


$ bitbake -c unpack myhello       ------>userprog.c copied in working dir
$ bitbake -c configure myhello

$ tree recipe-sysroot
$ tree recipe-sysroot-native
	


What is sysroot?
---------------
contain needed headers and libraries for generating binaries that run on the target architecture

recipe-sysroot-native:
	includes the build dependencies used in the host system during the build process.
	It is critical to the cross-compilation process because it encompasses the compiler, linker, build script tools, and more,

recipe-sysroot:
	the libraries and headers used in the target code

2. do_compile: 
	when executing this task, BB will invoke the C cross-compiler for compiling the myhello.c source file. 
	The results of the compilation will be in the folder pointed by the B environment variable (that, in most of the cases, is the same as the S folder).
	
$ bitbake -c compile myhello

3. do_install: 
	this task specifies where the helloworld binary should be installed into the rootfs. 
	It must be noticed that this installation will only happen within a temporary rootfs folder within the recipe WORKDIR (pointed by the variable D)

	image: This contains the files installed by the recipe (pointed to D variable).
	
$ bitbake -c install myhello

4. do_package: 
	in this phase the file installed in the directory D will be packaged in a package named myhello. 
	This package will be used later from BitBake when eventually building a rootfs image containing the helloworld recipe package

	packages: The extracted contents of packages are stored here
	packages-split: The contents of packages, extracted and split, are stored here. This has a sub-directory for each package
	
$ bitbake -c package myhello

$ bitbake myhello

$ ls deploy-rpms
	
	
	
	
	
compile the phy-image without adding our recipe myhello	

$ bitbake phy-image
$ runqemu nographic
	ls /usr/bin/userprog
	
	
	
	
	


Add the recipe to rootfs

IMAGE_INSTALL += "myhello"  		---->Add this in phy-image.bb file

$ bitbake phy-image
$ runqemu nographic
	ls /usr/bin/userprog














Who defines the fetch, configure and other tasks 
-------------------------------------------------

When bitbake is run to build a recipe, base.bbclass file gets inherited automatically by any recipe

You can find it in classes/base.bbclass

This class contains definitions for standard basic tasks such as fetching, unpacking, configuring (empty by default), compiling (runs any Makefile present), installing (empty by default) and packaging (empty by default)

These classes are often overridden or extended by other classes such as the autotools class or the package class.








